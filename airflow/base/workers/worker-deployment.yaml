kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: airflow-worker
  labels:
    tier: airflow
    component: worker
    release: airflow
    chart: "airflow-1.2.0"
    heritage: Helm
spec:
  serviceName: airflow-worker
  replicas: 1
  selector:
    matchLabels:
      tier: airflow
      component: worker
      release: airflow
  template:
    metadata:
      labels:
        tier: airflow
        component: worker
        release: airflow
      annotations:
        checksum/metadata-secret: dcbb26b06a9d686bf5fedceff6d4024447053fded58a37271cdfef14f8c8c800
        checksum/result-backend-secret: 81fd0bc85dc6b240d98a984a508d94f010a012348f2ce63d2a262b0cbc6e0356
        checksum/pgbouncer-config-secret: da52bd1edfe820f0ddfacdebb20a4cc6407d296ee45bcb500a6407e2261a5ba2
        checksum/webserver-secret-key: 79887cc1c2c60c2d795d853d494941cb57fbb70d009891903fc993ee7d8af03b
        checksum/airflow-config: aea4f92ef86c687e5d97ba4bdb0b444a5ba44300ce2d568b1c1b554e87d799c8
        checksum/extra-configmaps: 2e44e493035e2f6a255d08f8104087ff10d30aef6f63176f1b18f75f73295598
        checksum/extra-secrets: bb91ef06ddc31c0c5a29973832163d8b0b597812a793ef911d33b622bc9d1655
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  component: worker
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 600
      restartPolicy: Always
      serviceAccountName: airflow-worker
      securityContext:
        runAsUser: 50000
        fsGroup: 65533
      initContainers:
        - name: wait-for-airflow-migrations
          resources:
            {}
          image: apache/airflow:2.7.2
          imagePullPolicy: IfNotPresent
          args:          
            
            - python
            - -c
            - |
                  import airflow
                  import logging
                  import os
                  import time
          
                  from alembic.config import Config
                  from alembic.runtime.migration import MigrationContext
                  from alembic.script import ScriptDirectory
          
                  from airflow import settings
          
                  package_dir = os.path.abspath(os.path.dirname(airflow.__file__))
                  directory = os.path.join(package_dir, 'migrations')
                  config = Config(os.path.join(package_dir, 'alembic.ini'))
                  config.set_main_option('script_location', directory)
                  config.set_main_option('sqlalchemy.url', settings.SQL_ALCHEMY_CONN.replace('%', '%%'))
                  script_ = ScriptDirectory.from_config(config)
          
                  timeout=60
          
                  with settings.engine.connect() as connection:
                      context = MigrationContext.configure(connection)
                      ticker = 0
                      while True:
                          source_heads = set(script_.get_heads())
          
                          db_heads = set(context.get_current_heads())
                          if source_heads == db_heads:
                              break
          
                          if ticker >= timeout:
                              raise TimeoutError("There are still unapplied migrations after {} seconds.".format(ticker))
                          ticker += 1
                          time.sleep(1)
                          logging.info('Waiting for migrations... %s second(s)', ticker)
          envFrom:          
            []
          env:          
            - name: AIRFLOW_CONN_AWS
              valueFrom:
                secretKeyRef:
                  name: airflow-connections
                  key: AIRFLOW_CONN_AWS
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-fernet-key
                  key: fernet-key
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              valueFrom:
                configMapKeyRef:
                  name: db-connection
                  key: connection
            - name: AIRFLOW_CONN_AIRFLOW_DB
              valueFrom:
                configMapKeyRef:
                  name: db-connection
                  key: connection
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-webserver-secret-key
                  key: webserver-secret-key
            - name: AIRFLOW__CELERY__CELERY_RESULT_BACKEND
              valueFrom:
                secretKeyRef:
                  name: airflow-result-backend
                  key: connection
            - name: AIRFLOW__CELERY__RESULT_BACKEND
              valueFrom:
                secretKeyRef:
                  name: airflow-result-backend
                  key: connection
            - name: AIRFLOW__CELERY__BROKER_URL
              valueFrom:
                secretKeyRef:
                  name: airflow-broker-url
                  key: connection
        
      containers:
        - name: git-sync
          image: kennedyuche/airflow-git-sync:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 3446
          env:
            - name: GIT_TARGET_BRANCH
              value: "main"
            - name: GIT_REPO_URL
              value: "XXXX"
            - name: DAGS_TARGET_FOLDER
              value: "root"
          volumeMounts:
          - name: dags
            mountPath: git/dags

        - name: worker
          image: apache/airflow:2.7.2
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
              exec airflow celery worker
          resources:
            {}
          ports:
            - name: worker-logs
              containerPort: 8793
          volumeMounts:
            - name: logs
              mountPath: "/opt/airflow/logs"
            - name: config
              mountPath: "/opt/airflow/airflow.cfg"
              subPath: airflow.cfg
              readOnly: true
            - name: config
              mountPath: "/opt/airflow/config/airflow_local_settings.py"
              subPath: airflow_local_settings.py
              readOnly: true
            - name: dags
              mountPath: /opt/airflow/dags
              readOnly: True
          envFrom:          
            []
          env:
            - name: DUMB_INIT_SETSID
              value: "0"          
            - name: AIRFLOW_CONN_AWS
              valueFrom:
                secretKeyRef:
                  name: airflow-connections
                  key: AIRFLOW_CONN_AWS
            - name: AIRFLOW__CORE__FERNET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-fernet-key
                  key: fernet-key
            - name: AIRFLOW__WEBSERVER__SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: airflow-webserver-secret-key
                  key: webserver-secret-key
            - name: AIRFLOW__CELERY__CELERY_RESULT_BACKEND
              valueFrom:
                secretKeyRef:
                  name: airflow-result-backend
                  key: connection
            - name: AIRFLOW__CELERY__RESULT_BACKEND
              valueFrom:
                secretKeyRef:
                  name: airflow-result-backend
                  key: connection
            - name: AIRFLOW__CELERY__BROKER_URL
              valueFrom:
                secretKeyRef:
                  name: airflow-broker-url
                  key: connection        
                  
        - name: worker-log-groomer
          image: apache/airflow:2.7.2
          imagePullPolicy: IfNotPresent
          args: 
            - bash
            - /clean-logs
          
          env:
            - name: AIRFLOW__LOG_RETENTION_DAYS
              value: "15"
          resources:
            {}
          volumeMounts:
            - name: logs
              mountPath: "/opt/airflow/logs"
      volumes:
        - name: config
          configMap:
            name: airflow-config
        - name: dags
          emptyDir: {}
        - name: git-secret
          secret:
            defaultMode: 0400
            secretName: git-credentials
  volumeClaimTemplates:
    - metadata:
        name: logs
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 30Gi